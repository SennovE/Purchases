volumes:
  certbot:
  webroot:
  database:
  frontend_dist:

services:
  postgres:
    container_name: postgres
    image: postgres:13-alpine
    env_file:
      - ./.env
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  backend:
    container_name: backend
    build: ./backend
    env_file:
      - ./.env
    ports:
      - ${APP_PORT}:${APP_PORT}
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /backend
          ignore:
            - .venv/
        - action: rebuild
          path: ./backend/pyproject.toml
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    container_name: frontend
    build: ./frontend
    env_file:
      - ./.env
    ports:
      - ${VITE_PORT}:${VITE_PORT}
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /frontend
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    env_file:
      - ./.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certbot:/etc/letsencrypt:ro
      - webroot:/var/www/certbot:ro
    depends_on:
      - backend


  certbot:
    image: certbot/certbot
    volumes:
      - certbot:/etc/letsencrypt
      - webroot:/var/www/certbot
  
  renew:
    image: certbot/certbot
    volumes:
      - certbot:/etc/letsencrypt
      - webroot:/var/www/certbot
    entrypoint: >
      sh -c "
        while sleep 12h; do
          certbot renew --webroot -w /var/www/certbot --deploy-hook 'echo reload' ;
        done
      "

